pragma solidity ^0.4.24;


contract SignatureValidator {


    function checkSignature(bytes32 _messageHash, bytes32 _r, bytes32 _s, uint8 _v, address userAddress)
     public pure returns (bool) {
        return recoverAddress(_messageHash,  _r, _s, _v) == userAddress;
    }

  
    function recoverAddress(bytes32 _messageHash, bytes32 _r, bytes32 _s, uint8 _v)
     public pure returns (address) {
        return ecrecover(_messageHash, _v, _r, _s);
    }
    
    
}

contract CompanyA {
    function alpha() pure returns (uint256) {
        return 1;
    }
}

contract Identity {
    
    address userAddress;
    address registry;
    
    constructor(address _user, address _registry) payable {
        userAddress = _user;
        registry = _registry;
    }
    
    function send(address a) {
        
        ERC20 mycrypto = ERC20(a);
        
    }
    
    
    function() payable {
        
    }
    
}



/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 {
    function totalSupply() public view returns (uint256);

    function balanceOf(address _who) public view returns (uint256);

    function allowance(address _owner, address _spender) public view returns (uint256);

    function transfer(address _to, uint256 _value) public returns (bool);

    function approve(address _spender, uint256 _value) public returns (bool);

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);

    event Transfer(
        address indexed from,
        address indexed to,
        uint256 value
    );

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}


contract AllianceRegistry {
    
    mapping(address => bool ) public allianceMembers;
    
    // mapping(bytes32 => address ) public allianceMembers;
    
    
    
    constructor() public {}
    
    function createIdentity(address _user, address _tokenAddress) public {
        
        require(allianceMembers[msg.sender] == true);
        Identity a = new Identity(_user, address(this));
        
    }
    
    
    function addMember()  {}
    
    
}
